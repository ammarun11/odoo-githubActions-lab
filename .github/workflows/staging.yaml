name: Staging Deployment

on:
  push:
    tags:
      - 'v*'

jobs:
  build-image:
    name: Build Docker image and push to repositories
    runs-on: self-hosted
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Get Version
        id: get-version
        run: |
          echo ::set-output name=VERSION::$(echo $GITHUB_REF | cut -d / -f 3)

      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Create Image
        run: |
          cd odoo-source
          docker build -t odoo:${{ steps.get-version.outputs.VERSION }}-rc .
          echo 'Created Image with name:tag = odoo:${{ steps.get-version.outputs.VERSION }}-rc'

      - name: get-images-id
        id: image-id
        run: |
          echo ::set-output name=IMAGE_ID::$(docker images -q odoo:${{ steps.get-version.outputs.VERSION }}-rc)

      - name: Push Images
        run: |
          # Staging Image
          echo Push image for Staging
          docker tag ${{ steps.image-id.outputs.IMAGE_ID }} palopalepalo/odoo:16${{ steps.get-version.outputs.VERSION }}-rc
          docker push palopalepalo/odoo:16${{ steps.get-version.outputs.VERSION }}-rc
          # Production Image
          echo Push image for Production
          docker tag palopalepalo/odoo:16${{ steps.get-version.outputs.VERSION }}-rc palopalepalo/odoo:16${{ steps.get-version.outputs.VERSION }}
          docker push palopalepalo/odoo:16${{ steps.get-version.outputs.VERSION }}

      - name: Update Staging Manifest Yaml
        run: |
          cd deployment-odoo-source/staging
          yq e -i '.spec.template.spec.containers[0].image="palopalepalo/odoo:16${{ steps.get-version.outputs.VERSION }}-rc"' odoo-deployment.yaml
          cat odoo-deployment.yaml
      
      - name: Update Production Manifest Yaml
        run: |
          cd deployment-odoo-source/production
          yq e -i '.spec.template.spec.containers[0].image="palopalepalo/odoo:16${{ steps.get-version.outputs.VERSION }}"' odoo-deployment.yaml
          cat odoo-deployment.yaml

      - name: Push Change Back to Github Staging Branch
        uses: dmnemec/copy_file_to_another_repo_action@main
        env:
          API_TOKEN_GITHUB: ${{ secrets.API_TOKEN_GITHUB }}
        with:
          source_file: manifests
          destination_repo: ammarun11/odoo-githubActions-lab
          destination_branch: staging
          user_email: cintadamai46@gmail.com
          user_name: palopalepalo
          commit_message: Update k8s manifest image version to ${{ steps.get-version.outputs.VERSION }}
  
  image-scanning:
    name: Scan Image Vulnerability
    runs-on: ubuntu-latest
    needs: build-image
    steps:
      - name: get version
        id: get-version
        run: |
          echo ::set-output name=VERSION::$(echo $GITHUB_REF | cut -d / -f 3)

      - name: Scan Staging Odoo image with Trivy
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'palopalepalo/odoo:16${{ steps.get-version.outputs.VERSION }}-rc'
          format: 'table'
          exit-code: '0'
          severity: 'MEDIUM,HIGH,CRITICAL'

  deploy-staging:
    name: Deploy Staging
    needs: [build-image, image-scanning]
    runs-on: self-hosted
    environment:
      name: Staging
    steps:
      - name: ArgoCD Deploy to Staging
        run: |
          argocd login --insecure  ${{ secrets.ARGOCD_SERVER }} --username  ${{ secrets.ARGOCD_USER }} --password  ${{ secrets.ARGOCD_PASS}}
          argocd app create odoo-ammar-staging --project default --repo https://github.com/cusex-btech/github-actions-odoo.git --revision dev --path ./deployment-odoo-source/staging --dest-namespace odoo-ammar-staging --dest-server https://kubernetes.default.svc --upsert
          argocd --grpc-web app sync odoo-ammar-staging --force
          argocd --grpc-web app wait odoo-ammar-staging --timeout 600

  # create-pr-prod:
  #   name: Create Pull Request to Production
  #   needs:  deploy-staging
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Checkout staging branch
  #       uses: actions/checkout@v3
  #       with:
  #         ref: staging

  #     - name: Create pull request to production
  #       id: cpr
  #       uses: peter-evans/create-pull-request@v4
  #       with:
  #         token: ${{ secrets.API_TOKEN_GITHUB_FEBRY }}
  #         commit-message: Request Merge for Production branch
  #         title: Request Merge for Production branch
  #         body: Request Merge for Production branch
  #         base: staging
  #         labels: automated-pr, merge-to-prod
  #         branch: production

  #     - name: Check outputs
  #       if: ${{ steps.cpr.outputs.pull-request-number }}
  #       run: |
  #         echo "Pull Request Number - ${{ steps.cpr.outputs.pull-request-number }}"
  #         echo "Pull Request URL - ${{ steps.cpr.outputs.pull-request-url }}"
  #         echo "Pull Request Operation - ${{ steps.cpr.outputs.pull-request-operation }}"